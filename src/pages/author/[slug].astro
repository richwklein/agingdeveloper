---
/**
 * A specific author page.
 */
import Layout from "@layouts/Layout.astro"
import { getCollection } from "astro:content"
import slugify from "@sindresorhus/slugify"
import BreadcrumbHeader from "@components/BreadcrumbHeader.astro"
import { getArticlesByAuthor } from "@utils/article"
import DisplayLimitAlert from "@components/DisplayLimitAlert.astro"
import type { CollectionEntry } from "astro:content"
import InternalBackLink from "@components/InternalBackLink.astro"
import ArticleGrid from "@components/ArticleGrid.astro"
import { getSite, getSiteAuthor } from "@utils/site"
import SocialBar from "@components/SocialBar.astro"
import { Image } from "astro:assets"
import SeoBasic from "@components/seo/SeoBasic.astro"
import BreadcrumbJson from "@components/seo/BreadcrumbJson.astro"
import OpenGraphBasic from "@components/seo/OpenGraphBasic.astro"
import OpenGraphProfile from "@components/seo/OpenGraphProfile.astro"
import OpenGraphImage from "@components/seo/OpenGraphImage.astro"
import AuthorJson from "@components/seo/AuthorJson.astro"

interface Props {
  author: CollectionEntry<"author">
  site: CollectionEntry<"site">
  siteAuthor: CollectionEntry<"author">
}

export async function getStaticPaths() {
  const site = await getSite()
  const siteAuthor = await getSiteAuthor()
  const authors = await getCollection("author")

  const pages = authors.map((author) => {
    return {
      params: { slug: slugify(author.id) },
      props: { author, site, siteAuthor },
    }
  })

  return pages
}

const { site, author, siteAuthor } = Astro.props
const limit = site.data.displayLimit
const data = author.data
const { entries: articleEntries, total } = await getArticlesByAuthor(author.id, limit)
const authorPath = Astro.url.pathname
---

<Layout site={site}>
  <Fragment slot="seo">
    <SeoBasic
      title={`Articles by ${data.name}: Perspective & Expertise`}
      description={`Explore the latest articles from ${data.name}. Dive into a collection of their work, showcasing their expertise, unique perspective, and contributions to our site.`}
      path={authorPath}
      author={author}
    />
    <BreadcrumbJson
      site={site}
      crumbs={[
        { name: "Authors", path: "/author" },
        { name: data.name, path: authorPath },
      ]}
    />
    <OpenGraphBasic
      title={data.name}
      description={data.tagline}
      path={authorPath}
      type={"profile"}
      site={site}
    />
    <OpenGraphImage image={data.avatar} imageAlt={data.name} />
    <OpenGraphProfile author={author} />
    <AuthorJson author={author} writeCount={total} />
  </Fragment>
  <BreadcrumbHeader
    head={{ name: "Authors", path: "/author" }}
    tail={data.name}
    class:list={["mb-4"]}
  />
  <header class:list={["flex items-start"]}>
    <div
      class:list={[
        "mb-2 mr-4",
        "w-[150px] min-w-[150px] overflow-hidden rounded-lg ring-2 ring-secondary-light",
      ]}
    >
      <Image
        src={data.avatar}
        alt={data.name}
        loading={"eager"}
        fetchpriority={"high"}
        width={150}
        class:list={["aspect-[3/4] object-cover object-center"]}
      />
    </div>
    <div class:list={["flex flex-col"]}>
      <h3 class:list={["text-3xl leading-snug", "md:text-5xl"]}>{data.name}</h3>
      <p class:list={["text-md grow leading-tight", "xl:text-lg"]}>{data.bio}</p>
      <SocialBar socials={data.socials} />
    </div>
  </header>
  <ArticleGrid articles={articleEntries} class:list={["mt-4"]} />
  <DisplayLimitAlert displayed={articleEntries.length} total={total} class:list={["mt-4"]} />
  <InternalBackLink class:list={["mt-4"]} name={"authors"} path={"/author"} />
</Layout>
