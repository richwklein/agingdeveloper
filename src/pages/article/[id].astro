---
/**
 * A single article page.
 */
import Alert from '@components/Alert.astro'
import ArticleByLine from '@components/ArticleByLine.astro'
import ArticleImage from '@components/ArticleImage.astro'
import ArticlePopular from '@components/ArticlePopular.astro'
import ArticleRecent from '@components/ArticleRecent.astro'
import ArticleRelated from '@components/ArticleRelated.astro'
import ArticleTagGrid from '@components/ArticleTagGrid.astro'
import ArticleTimeToRead from '@components/ArticleTimeToRead.astro'
import ArticleTitle from '@components/ArticleTitle.astro'
import LinkMDX from '@components/LinkMDX.astro'
import LLMDisclaimer from '@components/LLMDisclaimer.astro'
import ArticleJson from '@components/seo/ArticleJson.astro'
import BreadcrumbJson from '@components/seo/BreadcrumbJson.astro'
import OpenGraphArticle from '@components/seo/OpenGraphArticle.astro'
import SeoBasic from '@components/seo/SeoBasic.astro'
import TwitterCard from '@components/seo/TwitterCard.astro'
import SeriesBanner from '@components/SeriesBanner.astro'
import Layout from '@layouts/Layout.astro'
import { getArticles } from '@utils/article'
import { getDefaultSite } from '@utils/site'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import { render } from 'astro:content'

interface Props {
  article: CollectionEntry<'article'>
  site: CollectionEntry<'site'>
}

export async function getStaticPaths() {
  const site = await getDefaultSite()

  const articles = await getArticles()
  const pages = articles.map((article) => {
    return {
      params: { id: article.id },
      props: { article, site },
    }
  })

  return pages
}

const { site, article } = Astro.props
const path = `/article/${article.id}`

const data = article.data
const author = await getEntry(data.author)

const series = data.series ? await getEntry(data.series) : null
const { Content, remarkPluginFrontmatter: frontmatter } = await render(article)
---

<Layout site={site}>
  <Fragment slot="seo">
    <SeoBasic title={data.title} description={data.description} path={path} site={site} />
    <OpenGraphArticle article={article} site={site} />
    <TwitterCard
      site={site}
      title={data.title}
      description={data.description}
      image={data.featured.image}
      imageAlt={data.title}
      author={author}
    />
    <ArticleJson
      article={article}
      author={author}
      wordCount={frontmatter.readTime.words}
      site={site}
    />
    <BreadcrumbJson
      site={site}
      crumbs={[
        { name: 'Articles', path: '/article' },
        { name: data.title, path: path },
      ]}
    />
  </Fragment>
  <article>
    <SeriesBanner
      seriesTitle={series?.data.title || ''}
      seriesDescription={series?.data.description || ''}
      current={0}
      total={1}
      prevUrl={''}
      nextUrl={''}
    />
    <ArticleByLine author={author} published={data.published} />
    <ArticleTitle title={data.title} description={data.description} class:list={['mt-4']} />
    <ArticleImage featured={data.featured} class:list={['mt-4']} />
    {data.enhanced && <LLMDisclaimer class:list={['mt-4']} />}
    <div class:list={['mt-4 grid grid-cols-6 gap-x-4']}>
      <div class:list={['prose col-span-6 max-w-none', 'md:prose-lg lg:prose-xl lg:col-span-4']}>
        <Content components={{ a: LinkMDX, Alert: Alert }} />
      </div>
      <div class:list={['hidden lg:col-span-2 lg:block']}>
        <ArticleTimeToRead
          minutes={frontmatter.readTime.minutes}
          words={frontmatter.readTime.words}
        />
        <ArticleRelated article={article} class:list={['mt-10']} />
        <ArticlePopular class:list={['mt-8']} />
        <ArticleRecent article={article} class:list={['mt-8']} />
      </div>
    </div>
    <ArticleTagGrid category={data.category} tags={data.tags} class:list={['mt-4']} />
  </article>
</Layout>
